
dna = 'TTAGGATTTACAGACCCTACGACCGTTAATTTTATGCCCCCCGTAGAACATATAGTTGATTAGCTTCCACTACGTCACGCCGTAAATTGTAGAATTGCAAAGAAACGTAGCCGCTGCACCTACGTGCTCGCAGACATGTAGTTCCCTTACGATGCGTCCTGTATCAGTGTCGTTCCTGGGACCATCTTACGCGTTCTGGCTTAATGACGGACTCCTCCAAGATGCACCACGCCTAATAATCAGAAGGCACTAAAAAGTCCCCTATGTGGTTATCAACTTACCTATGCAAACTGCCCTATATTTTCTAAACATAACCATACTGCCTCAAAGTTCACCAGCGTCCAGGCCTGCATTAAATGGCTCAGAGCCACATAAATTAATCCAGATATAGTACAGGTCCTAGGGATGATACCATTACGCAGCTCGCTGAGCTTACTACAGAAAGCGAGTAGGTCGAGCTCTCTCTGGCAGCAGACAGATTAGCCTACGGTCTGACACGGCAGGGCCAAATGGCATTGATAGAGGTATATGTTGCGGAGCGACAACGACGACAGCCACTTCTTGTTGTCCGTTGCGTGCGACCTCTGGCGTCGACTCTATAAATAAGTTCGCGAGACGTGACAGGTGTCCTGTCTCTTCTGACGTGAACTTGATGACTCTTACATTTATGGGGAGGGGCAAGAAAAAAACGTTGATAATGCATGTCCGTGATGGCATATAGGCGAATGGTGCAACACGGGTCGCAGAACTGAGGTGTTAATCGGCGTCCGCGATGCGGGCGGGATAACCGGAACAAGGACCAAGTGGTGTCCGCCCAGGCTTAAAACGCATCATTCTTGTGTAAGCCTCGAGGGAGACCTTAGGGAAATTCTACCCATTCTGTGCCACGTTTGATTTGGTTTACCGGAACCTCAGTGAAATGTGGCTCGGTCGGTACGGTCTCATGGCAAGTCTAGGCATATCCTCGTTTCCACCCCGGCTCAGGCATATTGTGCCGGTGTTGCCGACAGACACATAGCCCGAGCCGACCGTCGCCCTAACATTCCGTGGTAGGCGTTCTGGTATGAGACCCCTCCAAGGATCTGAAACCAGTTGCCGTTATAACGGGTAGCCGCTACAAGACAGTTGACGGCTTGGACGCTACAAGGCTCTGAGCAAAGTTTATTCGAGTTGACGCCAGAGTCTGAGCCGCGCTTTGCTGCGGTGCGACCACTACTACCGCAACCTTGCGGGGATCGCGAGCATCCACGGCCAGATTGAATTGGCAGCATCCTTACTTCTATCTGAAAATGCCGGGCACTAATAATTGTGATGAATAAATCACTTAATGGTCGCCGTCGTAGTGGTGGCTCCGCAGCAGTGCTAGCGCCACAACACGTAACAAGTAATGTTGTAGTAGTAGGGACGTTACCCCCGGGTAAGGGGGACGGGGCACGTTATACGCCACCTTCAATAGATGTCACAAAGGAGAGTTAAGACCGCCTTTGAGTCCATCATCTAAACGCATACTGTAAAGCTGCAATCACCAAGCCAGCATGAGACATCAGGAAGCGTGTTTGAAAAGGTTGGTTCTGTGAAATGTAGCCAAAAGTCTACGCACTACTTTTGAAATAGAGGCGGCGTTTACACCAATCCTCTGTTTGGAGGGCTAGGTCGGTTGACATTAGTGACAAGCCTGTCAGTAGTGCCACCGATCCGGAACATTATTCCTAATGGACTATTGTTAAAGATTAGCGGGTCGCCCCTCACGATGGGCCTACAATGCTTCCTAGCATCGTGAGATTACTACAAGTGCGGATCGTCAGGATCTAAATTTGTGGTACTACACTGATTGCTGAGCAAATGGTAAATGGTAGGGTACCACACGGGTGGATGTTTGAGCTGTCCCGTAACAGCTACTTGACAGCCCCATCCAGCATGGAAAGAGTACTCCAGTTCAGCGCGAAAGCAGGGGCCCACGTCTGTCTGGTCTCCTTGGCAAGAGTGGCGGTGGTCGTCGTAGCACCACAACATAGCATTGCCTGATTACACAGCCGGGTGAGGGAGGCAGTGTCAAAAGTTCCTGCCGCGTCAAAAAATCCTGAAAGGTTGCCGTCGTTGTAGTGGCGCCACAGCAATGGATGGCAAGTTATTTCGATACTCTGGTACCTATTACTTTAAATTTCGCTGCGTGCCCAGTCGAAACGTGCAACGTGATTCCGCCCGATGTGCGAAACGGGTACTATGGCGGGCCTGTCAGAGGAACCCATGTGGTCTAGACACGTGGCAGTTGTGGTCGTGGCGCCACAACACTGCGGAGCAACTACTACCACCGCCACTCTACGCAATTCGGACTCGCACATTTCTAAGGCCTAAGTCTAGGTACTGTTGTGGCGCCACCACCACAACGGCGACATCTGATTATGACAGTTGTTGCCCCTGGCGTGACGATTGGCCCTATCTTTGCGTCGCCGGCGTAGCAGTGGTAGTAGTAGCTCCACAGCATTCCTAGAATCAGGCTCGTAAGGCGACGTATCGAAGCGGTCCACAGACCCCTGCATATCTTTGTAGACCCGGCCTGGGTGTCCAGGCATTTTAGGCCTTCCCGGTGGAAGCCGTGGAGTAGAACTGGGAGTGAGCCTATCCTGATTGGCGGCATGTATGTATGCCCCTACCGACTGGCTCTGCTACCCTTTATTACATCTGGGCTGGAAAGTTGTCTATATGCTGTCAGACTGGGTCGGATATATAGAGGCAGAGTACTGTGTTTTATTTGCCTTTGCGTGGCAGTGGTTGTAGTAGCCCCACAACACTCAGTGCCAAGATGTCAATTGCATACGACTCTTGGTCTGAGATTCCCCTTCCCTCGTTGGGGTTCGGGGCGGTGGCGGTGCTATACTTGGGGACGCGAAGACTCAGATCAGGGGTATTCCTTATTCGACAAGTTGCCGTGGTGGTTGTTGCTCCACAACATGGACCACATTCACTATAGTTGGAGTGACGGCAGCTCGCGTCGTCGGTACCTATTGATTAGTAGAGTTCGCGGCTTTGGGTAGTTTGTTCTACGCCTAACGGTCAGAGAGCAGTGGATATGTCGTTGTTACTGAGGCTAGCGCATAGTAGCTGTTGTTGTGGTTGCTCCGCAGCAAGGTACGGATCTTTCCACACTTGCGGTGGCGGTGGTCGTAGTCGCACCGCAGCATCTTAGTTACAACGTAAGTCGGCCGTCGAAACACTGGCTATCCTTGTTAGAGAGAAGCTTCTGAAGGTGGCGCCGGGACGCGTGTCTCACGGTTCAGGGCAATTTGCTAGCAAAGAAACGAAAACCCGCCACGCCCCTGCCGGGTAGTCCCGGGGTGGTGCGCTGGGTGGCTCTGCTATGTTGTGCCGTGTCGTACCATCCGTAGCAACTACGGGTCGTACCCGGTTGAGACAAAGATCCGTGTAAAAAGCTTAATATGTGAAGAACGCCCACTCGGGAAGACTGGTGCACTTGACTTTGCAATCGGGTCAATCGATCCACAAGGAGAACAATAGGCCGTTAGACGGTCATGGGCTACCTTCCGTGGTGACGACGGAGGTAGGTATGCATAACGCCCACTCGTCCGTTCTGCCTTGCTTCTTCTAGATAACGGGGACAAGCAGCGCAAGCTTCCTGCTCATTAATGCACGGCCCGCGCAGCGACACCAAGCCCACCAGCATCAATGGGTCCCCCGGAGTGGCGATCCGCAGATCTCTGCACGGTTATGTCTTACGAGTTCGGCGCCATTGGGTTGGTGGCTCGACAATTTTGTGAGCTCGACTTATATGTGTCGCGAGCTCCGCTTTGTTACACTAACCTGGGAGTCTAGGTTTGTCTACCGTGGTTGTAAGCATTACGGCCGCAGAGGGGGTTAACGACGAATCTCCTAGACTCACAGCTGCTCGGCACAAGCCTCCCATAATACTCTACATGAGAAATGGGATACCGTAGATAGATTGTCCTGTGGTACCTCTACTCGTAGCCCCTTAGACTCCCATACTCCTCAGCTTTTAAGCGACACTTGCACCGCTGGTACATCAAGAGACGTCAGATAGGACTGCTCCAATTTGAAGGAACAGGCTATCAAGATGACATGAATGGGTTCACCAGCCATAGCGCCGTACCGCGCTTAGTGTCGAGACCTACATCTGATTTCACAGTGGGCAATGAGACGAGACTTCGTCCGTTGGTAATACCTGTCGGAGGCCCCCCGAATACAAGGACCAGCCTTCTATAACAGACTGCCAGAATAATCGGTACAAACAATAGGGGACAAGCAAAAAATATGGCATTCAGTGTGACCAATGGGTACGCAGAGTTTCCGGGGCATTGGGGCAGATGGCCGATACTGACACCACAAGGGCGCATTCGTTCCCACCAGCCCTCGCGTCCACCGGCATCTAGCGTGCTAGAGTGGTTAGGCGACCACCTCCTTTTACCCCGTCTAAAGGACGACTTGTGAGGACTGAATCAGCACTAATCATGGTTATAGGCCGGGACTCAGCGAAAGTGATCCCGCATGTCTATGGGTGATGGGACCCCCCGTCCTTTCATGTTATATTTGCTCGATAGTCTCATACTACCAAAGGTGAGACTTCCCTCCTTAATACTATGTATTTCGGGTATTACATGCGTGAGGTATAATATGGGGGACAATCAAGTCTATAGACGCTGCATCTTCGTCGAGGTTACTTATGCTGCTGGTTCCTACTTCTAATGAAAATCCAAAAGCCGATTGCCGTTAGTCGATATCCGACAGAATGTGTGTCAATCCACGGGAGTGAGTAGCCGTTGTAGTCGTCGCGCCACAGCAGACGGGTTGGATCTAAAAGATATGCCCTGTCGTAACGAAGGCTAAGAGTTTCTGTTGCGAACGAAACAGTAACTACCGTAAGAATATCGCGTTTATTGCCATGATTTTTCCCGACCCAGCCCTATCGCTTAAGGTCATTCGATTAGTCGGAGTTTGATCAAGGTCTTGCGGGTTTAAATGGCGGCATGTATGAACGCATCCAGTGCACGGAGATCTCTTACATTCAAGTGCTTCCGTTATTGAAACATCGACTTCTAACAAGACCCCCTATCCAGCCCTCGAAGTCGTATGCTACCAGGCATCAGTAAATGTATCCAATTTCATATGTCCTTCCCTTTCCTCTATTCTGCCGGGCGCGTCCATTCAGTCTATGTGAAGGATTTATCACCACAGCGGCTTGAGCATCGGGTCGACTAGGGTTGACCCCCTGAGCCGCTATAAGACCGACTGCTGCGGTGCCACTACTACTACTGCAACCCCCCCGTTAAGATGCTTTCTGGTGCTACCCCGTCGATTGGCAAGTCTGAATATTGCGAGCATGCTATTGACGAGCAAACGTTAGGGTCGCCTTAGGCTCGAACGCGTCCGTTTACACATGATTCGTGTATAAAGAGAACAGGTAAGAGCCCTGGTCCCGTAGTTCGAACTCGTCTTTATAAAGATGACAACCCGACTAACCCCCTGCGCTTCCGTGACTGATCATGTTTAGACATTATTTATTCTGATCCCTCATATAGACCAGACAACTTTTGAGCTTACGCTTCATGCACTATAGCACATCCCACACACTGCGTGGCAGGCGTTCTGCGTGGAATTTTATGGTCTTTAAGTGACCAATGGAGAGAGGTTTGTATGCGCGGCGATTATTAATTCTGTAGAATTGACGGTGAAGCACTACGTAAGCAATAGCTTTGCTGACAATCTGGCCTACGCCACATACACCTCGATGCAAGTGTAACAGTTCCCGTGCATTCAGAGGTCTATCAAGGCCACGTGTCATGATTCGCCTCTTGAATCAGTCTCGAATACACGACAGGGTCTGTCGGTTCAAATCGAATTTGGTAGGAGCAGCTCCAAGTACCTATGTGCCCGTGGTGCTACTACCCGATATAGGGAAATGCACTAAGGATTTGACGTAAGACGATATGTACCAGTTAACAGCAACTTCCTCAGCCAGACCTGAACAAGTACGGGACCGCGTATTGCATTTAATCCTCTCGTAACTCATATTGCTGTGGCGCAGCAAACGTATGTCGAGACCGGACGCCTTAATGGGATCCGCAAGCTGATCCCACCTCAGTGGTGTTTCCTGCGAGAAGGGACATGGTCAGTTAGTGCCAGGGGCCGGCCTTGGCTCACCCCTTTGGTACATCTATTGTGTCGTCGTGGATCGCTAACCTGTGGAAAGGAGACGTTCAATGGGTCCGCTAAGTGGCGCACGTGTAGCTTTAAATCTCAGCAACCATAGGTCTAATATATAACATTATATCGGACGCGATCCCGGCCCCAATACGCGACTGGGTGGATAAAGGCGGCCCCAGCGACAACCATTTAAGTAGAGTTTTACGTCGCTAACTAGCCATCAGTTGTTACCCGGAAGTTTGTCACTTGTCCCGAATGACATACATTAACAACACTCAATCTCTCCTAGCCACACACAGGGGCCCGCTATGGCACTCTGTCAAGAGTCTTGCTGGGGTTGTCGGCGCCCTGAATATGGGGTGCGTGAGAAGAAACTATTCGTTTAAGGATGATCGGGTGTCCAGGACCAGAAAGCGTTCGTATATGTTATATGCCTAGGAGTAAGAGCACAACGTTGTGAGATCTTTCCGCGAGCGGATGTCTGGGACCGTGAGCATTCTCCATCAGTCTGTGCGAAGATCGGGTAGCGGTAGTCGTCGTCGCCCCACAACATTATACTCGTTACGAGAAAAAAATTTGTCCCAGCGTATTTCATTCGCCCGCGATCGCAGATTCAAAATAGACCTGTAACGGTTGCTGTGGTCGTTGTTGCGCCACAGCACACGCGGAGAAACCATGAGTGACGAGTAGTGTCCCGGTTTCATCATACTAACTCTAAAGGGGATGCCTTGTAGCAAACAGACTAACCCACAACTGTGCAACCACTCCAGTGCTTTTTCCTAGCGTGAACCATTACATTCGTAGAGACATGCGAATTATACCTCTAAACTCGGCCGAGATCCTGCTCGTGTCGTGGTCATCGGAATGCGATTACCCCTTAAATACCACACTGGAGTCGAGGCCTTAACGGATTCGGTCACCATGGGAGTAATGCTTCAAACGGCAGCTTCTTAGAGCAGACGGCAATTTGATTAATCAGTCACCTCCTAGAGGTCGCAGTAGTGGTTGTAGCCCCACAACAGGTAGCCGTGGTGGTTGTGGCTCCACAGCA'
pattern = 'CCGATTTTAT'
results = []

reverse_translator = {'Y': ['UAC', 'UAU'], 'P': ['CCU', 'CCG', 'CCA', 'CCC'],
                      'Q': ['CAG', 'CAA'],
                      'R': ['CGU', 'CGC', 'AGG', 'CGA', 'CGG', 'AGA'],
                      'S': ['AGC', 'UCC', 'AGU', 'UCG', 'UCA', 'UCU'],
                      'T': ['ACG', 'ACU', 'ACC', 'ACA'],
                      'V': ['GUC', 'GUG', 'GUU', 'GUA'], 'W': ['UGG'],
                      'H': ['CAC', 'CAU'], 'I': ['AUA', 'AUU', 'AUC'],
                      '*': ['UAG', 'UGA', 'UAA'], 'K': ['AAA', 'AAG'],
                      'L': ['UUA', 'UUG', 'CUC', 'CUA', 'CUG', 'CUU'],
                      'M': ['AUG'], 'N': ['AAU', 'AAC'],
                      'A': ['GCG', 'GCA', 'GCC', 'GCU'],
                      'C': ['UGC', 'UGU'], 'D': ['GAC', 'GAU'],
                      'E': ['GAG', 'GAA'], 'F': ['UUU', 'UUC'],
                      'G': ['GGG', 'GGA', 'GGC', 'GGU']}


def combinate(pattern):
    results = []
    local_results = None
    if len(pattern) > 1:
        local_results = combinate(pattern[1:])
    else:
       return reverse_translator[pattern]
    for item in local_results:
        for i in reverse_translator[pattern[0]]:
            results.append(i + item)
    return results

def reverse_pattern(pattern):
    result = ""
    for letter in pattern:
        if letter == "A":
            result = result + "U"
        elif letter == "U":
            result = result + "A"
        elif letter == "C":
            result = result + "G"
        elif letter == "G":
            result = result + "C"
    return result[::-1]

combinations = combinate(pattern)
#print(combinations)
dna = dna.replace('T', 'U')
#print(dna)
pattern_lenght = len(pattern) * 3
#print(pattern_lenght)

for i in range(len(dna) - pattern_lenght):
    strade = dna[i:i+pattern_lenght]
    #print(strade + ' ' + reverse_pattern(strade))
    if strade in combinations or reverse_pattern(strade) in combinations:
        results.append(strade.replace('U', 'T'))

print(' '.join(results))
    
