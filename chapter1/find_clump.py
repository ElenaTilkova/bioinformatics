
import operator


f = open("/home/serge/Documents/bioinformatica/E-coli.txt")

dna = f.readline()

#dna = "GGCAAACAGATCTCAGCCAATATGTCGGATGCGCATCTCTATCGGCCACGCAGGGACAGACAGTACCACTCATCTGCTCACCTACGCCAGTTTGCTATTAAATCAGTAGCGGCTGCCGCAGTACGCGTGCGGAACAGTATTCTGCTAACAGCCCCAAGGACCGTTCAATCTATCACACAAAAGCCCTCCCAGTACTCAAGATTTATTGGAATTCGTAGGAGCCATGTAGCTCTTACAACAGTACTATTGCACCACAAGTTTACATGTAAAGGGAGTAATCCATTGTGAATGGATAGATTGGGCAGCGTACATCAAGCGGATCTTCGAATCGCGCGAATTGACCTGCCATATTTTTGCTGGGGGCAGCAGGGTGGCGAAGAGCAGAGCGCACTCACGATATATTCTATCCATGGAGAGAGCGCACTCGCACTTAGCCGGAAGAACATAGCCGGTACAGAGCGCACTAAACGCTCATGAGAGCGCACTTTCGTCGCTTCTAGAGCGCAGAGCGCACTGGGACACGTCTTCTGCTAAGAAGAGCGCACTGCACTTAGTTCTGCTTCAGAGCGCACTCCCAAAACTTCTGCTAGAGGGTGCCTCGAATGTAAATACGTACCACCAGAGCGCACTACTTTCTGCTAGAGAGCGCACTAAGAGCAGAGCGCACTCTTCTGCTTCAGAGAGAGCGCACTGCTAGAAGAGCGCACTAGAGCGCACTAGAGCGCACTGCGGCTTCTGCAGAGCGCAGAGCGCACTGCGCACTGGAAGAGAGAGCGCACTCGCACTCTGCTAGAGCGCACTAGAGTTCTAAACGGCTAGAGCGCACTAGAAGAGCGCACTTGCTAGAGCGCACTTGCTAGGGGACGTAGTCTTCTGCTAGTGCTAGCCTAGAGCGCACTTAGAGCGCACTTGCAGAGCGCACTGCGAGAGCGCACTACTCCCCATTGCGAGTGTCGTCAGAGAGCGCACTGCTAGTTCCTGGTGCAACTGAGAGCACACTTCTTCTGCTAGTGCTAGCGTTTTTTGCGCGTCCACACCACCACTTCTGCTAGGCCCCGCGTAAGCGCAGTATACTTCTGCCTTCTGCTAGAGGTCGAAGGACACTACACGTGTGCGTATGTCAAGTATAACGGAAGTGTAGTCAGTCGTGGCGTATTTTGCCCCATGGTAATACATTAAGCACCAAGCGAGAAGTAGCTTTATTAGCCGCGCATAATAGTAGTCCGAAGTGACAAGTTCGTTAGAGGCCCTTAGGCGTACCGATTACCCCCTCTCGTAACTGGCGGTACGTCGGGCAACCGAGTTCGTCGTTGAAGGTCCATCTCCTTCTATGGTCTAGCAGGACCGTGTCGAACATATGCTGGCGGTCTCCACAGGTGAATAGTGGAACCGGGTACGTAATAGTGTCTCGAACACGGCATAACGTAGAATAGCAGAACCAATTATAACGTAGATGGCAATAACGTAGACGTCGCATAACGTAGATTATAACGTAGAAAGAAATCCCGAATAACGTAGACTAACTTAAGACAGTACATAAATAACGTAGAGGGCATTGGAAGCCATAACGTAGAACCAGTCTGGGGGAGTCTGAGCACTAGATATCTCCATAACGTAGAGTAGAACGTAGACATAACGTAGACTCCCAATAACGTAGAGTAAAAACCATAACGTAGAGTAGAAAATAACGTAGAGGTTGGTTTAACTAATCGATATAACGTAGATATTGCCTATAACGTAGAACATAAATAACGTAGATAGATTTGTAGCACCGGCCAACATCCCTATAGAGGCTTTCCGATTAACTTATAACATAACGTAGACATGGGTTTGCATCAATCACATAACGTAGAACAGCTAAATAACGTAGAAACGTAGACGGGATATAACGTAGACCTTTTGTGTCAGCGTGGAGGAATAACGTAATAACGTAGATTCAATGAGGAAGATGCGATAACGTAGATAACGTAGAGAAGTCCCAATAACGTAGATTACGAATAACGTATTCAATGAGGCCTCATACGCCAGGTTCAATGAGGTGTAGTGTGCCTTCAATGAGGACTGCATTTTCAATGAGGTTCGTCGTCCGTCGTTCAATGAGGTGAGGGCGCGGTACGCACTGGTACGCAATGACCGCCATTAGTTCAATGAGGAATGATTCAATGAGGTTAGTTATTTCAATGAGGCTTTTCAATGAGGCAGCACCAGTAAATTCATTCAATGAGGCCTACGCTACCGTGGTTTCAATGAGGATGAGGTTCAATGAGGCTTCAATGAGTTCAATGAGGGCCTTTATGTTTCAATGAGGGTTTTCAATGATTTTCAATGAGGAGGTGAGTTCAATGAGGCGATTCAATGAGGTCAATGTTCAATGAGGTTCAATGAGGATAGCGTGGTATCTATATTCAATGAGGCCTTCAATGAGGGATGCCAGATGCGTGTGTTTGGAGATAAAGAGCGACATTCAATGTTCAATGAGGAGGGTAGCTATGACTAAGCATTCAATGAGGTGAGGAATCGAGAACTGTGCACGATCAGTTACACGATTCGGTCTCACTCGTTTGGGAACTATCGCGGCACCGAGGCTTATGTACCGGGCAGGGGCGTACCCTTGGAGCGACTGTCAAATGCTTAGATATGCAGATCTCGACCTGCTTGGCCCGTCGAGCTACGAGAGCCATAGCTGTTAAGGACGCCCAGGAGCCGTTTTACGGAAAAGAATGGGAAGACTCTGAACACTCTTCAGCCGGGCCCACATCTTCCGGCAAGGAGATAAGTTGGTTGCCGTACTACTCCTGGACAACGACCTCACCGAAGTGACAGCGTTAATACCCCCGCTATAGAAAGAGTCCGCGTACGAGTACTTAGGGACCTCCGCCTAGCGATTCCCTCTCCGTACATCGTATCCGTTGTTTTAGCGCCGATGGGCAAGTTTGCCGTATTATGTTGTAGCGGATCCGTATTATGTATTATGCCGTATTATGTAGCGGCTAGGGGCTCACGGTTCCTTTGTACCGTATTATGGGGCCGTATTATGCGTATTATGTAGCGGTTTTTTGTAGCGGTACTACTTTGTTTGTAGCGGTTGTAGCGGTAGTTTGTTTGTAGCTTTGTAGCGGGCTGTCGCGCGACCCGTATTATGGCTGAGACAATCCGTATTCCGTATTATGTGGTCCTTCCGTATTATGTATTATGTATCCGTATTATGATGTGTCGTAGATTTTGTACCGTCCGTATTCCGTATTATGTGAGCCCGTATTATGCAGATGTACTGAAAGCTGATCCGTATTATCCGTATTATGGCCGTATTATGAGCGGCCGTATTATGAGCGGATTGTTTGTAGCGGCGGCATTAGTCCGTATTATGGGACTAGTTTTGTAGCCGTATTATGTAAGGACCAGGCCCCGTATTATGCTTTGTTTCCGTATTATGTTATGTTTGTAGCGGGCCGTATTATGTGCCGTATTATGGTTTTGTATTTTTGTACCGTATTATGAACCGTATTATGGGATCCTTCTCGCGTAAAAACGTCATTCATCGTATCACTGTGGGTTCTGCGGTGAACTGTTTCCATGAGGTATGTATGGTATTGGCGTCATAACTGTGGGCCTGGGAGGAACGTCTGCCAATGGGTGCAGCCTGTTAGAGGTCTCTTTTAGTGGCATAGGTATTCAAGGCTCACGGCGCCGGATGCTTATTGCTCGGCCGGTGTAACTACCCTACGCCATTCGTTCCATGGACCTTCCTTAGGAGCCTGAAAGCTGCCAGAGTATCAATCTGCCGCAGCCTCTACATTGAAGGTCAATTGCTATCCTATCTGAGCTAGGGAAAAATAAGTAAACTACTTACTTGAAATAGGTCACCTTTCGTAGACGCGGTCTAATTAATTTATTGGTTTGATCCAGATAAACCAATCTGGTTAAGCGGTTCCACGACTGGGGTGATGCGAAAAAGGCTTCACATGCACGAGAAATTGATACATGTCTGGTGTATGATTGAGTAAATTGGATACTCCCTTAAGTTCCTGCCTAAACGTTTAGGTGAATACCTACAAGTAGGCGATGAAGCGGAGATCAACAGTTCTCTTATGGGCAGGTTGGTTTGCCTAACCATGAGTTAGTCCTAACTCAGTATCTGGGGCTTAATCGATATCGCCCGTTATAACAATTGATCCTATGGTTGAAGCATCCTATATGCCTACCAGACCGGCGTCAATCCCTAGTCCAAGTTACGGGATATAAGCCGGAGCCAGTCGGAAGGCCCCGACACCCTTAAAGCTACGCTAACGATACAGTGTCTGGAGGGGCAATTATAGAACTAGGCACTACCGATGCCAGTATGACCAAAGGATTAGTCGCTTGAACATGTCAGAGATATGCAGTGCTAGATCTTTGATAACATCCTCGTACACTGAGTAATATTGCTAAGTTTGCTCGGCCCTTTGCACTTTCTCATCCCCCCTGACCACGGCCTCATGCTGCTAGGACAGATTTTCTAACGAATTAAACAATCTTCACGCGCCGGTTCAACCAGGCAGGGAAAAGCACAAAGGTACCGCTGTTTTTCGAGGTATAACCCGTCAGCTTCGTATTAATAATGGAGCGAACGATATCGATTGCTTAGAGTACTGGTACGGACAGTTGTTTTAGGCGGTAACCATCGATAGTTTCCGAGGTTCTCGCTTCCACCAGCGGGATAATTGGCAAGGGTTTAATATTGGAGGTATTGATGTTCGCGGCATCTGATTACATATTTGCAACGAAGGGCGTCGAGTAGCATGAGCCGTGATAGGTATAGTAACTCCTTCACCTTCACGCAAGCCTGTCGACTCTCTTAGCCTTCACGCAACGCTAGAAAAGAACTAGGGTTACCTTCACGCAGCCTTCACGCAGCCTTTCACCTTCACGCACAGGCTTCTAATTCCCTACCGACAGATTTGAGTTACCGCGGAACCTTCACGCAGGTTGGCAGTCGTTCCGGCCCCTCCTTCACGCACCCTTCACGCAACAACCTATCCCTTCACGCATGAGGGGGATAAGCCCTTCCCTTCACGCATCACGCCTTCACGCATCGATCTTGTAAGAGAGCAGCCCTTCACGCACTGACGGTACAACTGGACACTCGGCACATCGTGGTACTCCTTCACGCAACGAGTCTCCTTCACCTTCACGCACCTACCTTCACGCACCTTCACGCACGCCCTTCACGCAGCGATAAACGGCGATAATGTGGGCAAGCACGGCGATAATGCCTTCACGCACCTTCACGCACACGCAGATAAATAAGTCCTTCCTTCACGCATAACTGTGACGGCGATAATAAGGAAACCCTTCACGCAAACCTTCACCTTCACGCAAGACCTTCCCCTTCACGCAATAATCTACCTTCACGCACACGCAGCGATAACGATAGGGTGCAACGGCGATAATGATAACGGGTGAAATACGGCGATAATACACGGCGATAAACGGCGATAAGCATACGGCGATAAATATGAAGCGTCTATAACGGCGATAAAACGTTCTTCTATATGACGGCGATAAAGACGGCGATAAATTGAAACGGCGAACGGCGATAATAAAACGGCGATAACTATCTATATGAAAACGGCGATAAAAGTATTAGAATTTCTATATGAAATCTAACGGCGATAACCAGCAGCAAAACGGCGATAAGATAACGGCGATAAGAATTTCACGGCGATAATCTTACGGCGATAAAATGTTCTATACGGCGATAATTCACGGCGATAAGCGATAAACGTCTCTATATGTCTATATGAATTTGCTCTATATGAAGCATCGCGTAACGGCAAGGCTTTCCCGAACAATGAAATAGTCTATATGAAGTCGGCCCTGTTCCAAGGAGTGTCGTTTCTATATGAAATGGCCTCTATATGAAATATGAACTTGGAATCTAGTCCGTAACAAAATTAACTTCTTCTAATGGATGTTGAGTCGCAATCCTAGTTAGAACATTCGGGGGGTGTCCTTAGGGGATCACTACCCTAGTAAGGGAGGCTTCCCCCTCCGGCACACGGCGTGCCCTCATCGGTCTTGGCTGGTCATTGAAAAACGGAAGTAAGACACCGGCACTTCTCAGCTGCCTAGTACCGACCCTGGCTGATAACTTGCAATGAGGGCGAGCTACCACGTACCCCGGTACTCAACTCCAATGCCGGCTCCTTACTATTACTGCGGCCCCTTACGGGATATTTTTTATTACACCATTTACACCCGCAATTGTGTGGTTAATTTTTGCAAGAGTGCTGATACCGATCTCTGTGTAAGGGTATACGGATTCCGCTAGCAGGTGAAGCTGGCTATACTTTAGGATTCGATATCAGGTTCGAAGGACCCATGTCGCGATGCTTGAGTGGGCATGGCTCGTGTCATAATGAACCAAGGCCCGCGGACAGCGGCGAAGAGGATAAAAGTGTACTGCACGTACAGAAGTCAAAAAGGTTAACGAGTCCTCGCCTTGCCGTGATGTGTTGTGTGTATCCTTGGTTATTGATCCTTCGGGCAGAACAATCGGAGGAAGTCTCGAGTTTAAGGAATAGGCGCCAGAGGCGATAAGGATGTCGGTTACCCCACAGAATTAGGAGGTCAGTAGTGTGTCCGATACCAATGTTTACATACTGGCGGACAGCCTTTACGGCTAAAGCAACTTCAAAAAGGAAATTACAAAGTGATATCCTTTTAGGGCATAGCCGGATGCCGTCACCAGAGAAACCAGTCGGGATATTAGGAGGCCACTACCTGTACCGCTTACGTACTGAGTCAAATAGACTACCCGGGGACCAAACCGTGAGTAGACCTATCGTTACAATAAAACATCTCATTTCTCTTACCCAGTTTTCCGCACGGTAAAGTCTAGCCCTATCACACGTTTCGAGCCACTACTCGGTGCGGAGTATGTTGGGATCCCAACGAACAAATAAATCTAGCATTTTAGGTCTTATCGTCTCATGGGGGAGCAAACATTGTAGGTTACCTGACACGCCCACTACAAGGGTGACTCCCACATCTATCGAATATGGGCGAACCCATGCGCTCTACGGTAAGAAGTGGCCGGACCGTCGTGGGGTGTTCTACTTGGAAACATAATTCCAGGGTGAAAATACGCAGCTCGCGTTCCTAGCCTCCTGACGGCAAGCCCAATTGACTAACGGTCCGCTCGTCAAGTAGCTCCTTGCTAAAGCTCCGACTCGTGGGGCGTTACATAAAGCGCGAACAGATCAAGCCCGCCCCATTTATGGTATCTGTCGGAAAGCGTGGCTCGTGATGTGCTAGCTAGGCTTCACCAGCGCAGTCAGATCTGGACGGCCGGTTGGGGCCACGATGGCGTCAGACCACATGTTGCAACGGGACAGTATAGCTTACGGGACTCGGAATCTTCATTACTTCATTACTGCCGGTCATTACTGCCGTCGAGCTCGTTGTTCATTACTGCCTAGTCAAATCTCTGCGCGTAAATGGTCGTCATTACTGCCTTTCATTACTGCTGACAAACTCATTACTGCTACTGTCATTATCATTACTGCGAAGTCGCGTCATTATCATTACTGCCTGCCGTGTCGCGCGCTTCATTACTGCCGTCGCGCGCTCATTACTGCTTTGTCGCGTCATTACTGCCTCATTCATTACTGCCTCATTACTGCGCGCTGCTCCTTTCGTCATTACTGCCATTACTGCCTCCGATCATTTCGTTCATTACTGCAAATGTTGTGACAATCATTACTGCGCTCATTACTGCCTGTCGCGTCATTACTGCACGTTCATTACTGCGCGCTGCGTTCATTTCATTACCTTCTTCGTCGGTCTTCGTCGGTACTGCCAGCTTCGTCGGTGCCTTCCTTCGTCGGTTGTCATTACTGCGACACCTCATTACTGCTCATTACTCCTTCGTCGGTTCGCTTCGTCGGTGTCTTCGTCGGTTGACTTCGTCGGTCGCTTCGTCGGTGCCACCTTCGTCGGTTACTTCGTCGGTTTCGTCGGTCGCGCGCTACTTCGTCGGTGGAGGAGACTTCGTCGGTCGGAGGAAACGCTTCGTCGGTCGAGCTTCGTCGGCTTCGTCGGTCTTCGTCGGTCAGAAAACTCTTCGTCGGTAGCTTCGTCGGTCTTCGTCGGTCGGAGGAAGACGGAGGAAGAAGAACTTCGTCGGTCGTCGGTGACGGAGAGACGCTTCGTCGGTCGGAGCTTCGTCGGTGCTTCGTCGGTGTGACCTTCGTCTTCGTCGGTCGTCGGTGGAAGACCTTCGTCGGTGGAGGAAGACGGAGGAAGACGGAGGAAGACGGAGGCTTCGTCGGTTCCTTCGTCGGTGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTTCGTCCTTCGTCGGTACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTCGACGCTAGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGATGTGTAAAGTAAAGATGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTACAGGGTGTTTATACTACAGGGTGTGGTGTACAGGGTGTTTACAGTACAGGGTGTGTACAGGGTGTGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTGTTACAGGGTTACAGGGTGTGTTACAGGGTGT"
L = 500
k = 9
t = 3

def find_kmers(string, k, t):
    kmers = dict()
    for i in range(len(string) - k):
        kmer = string[i:i + k]
        if  kmer in kmers:
            kmers[kmer] = kmers[kmer] + 1
        else:
            kmers[kmer] = 1
    sorted_kmers = sorted(kmers.items(), key=operator.itemgetter(1), reverse=True)
    result = []
    for kmer in sorted_kmers:
        if kmer[1] < t:
            break
        else:
            result.append(kmer)
    return result

patterns = dict()
for i in range(len(dna) - L):
    founded_patterns = find_kmers(dna[i:i+L], k, t)
    for pattern in founded_patterns:
        if pattern[0] in patterns:
            patterns[pattern[0]] = patterns[pattern[0]] + pattern[1]
        else:
            patterns[pattern[0]] = pattern[1]


result_string = ""
for i in patterns:
    result_string = result_string + i + " "

result_string = result_string.strip()

f.close()

print(result_string)
